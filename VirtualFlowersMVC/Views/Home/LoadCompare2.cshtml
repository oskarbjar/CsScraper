@using VirtualFlowersMVC.Models
@model CompareStatisticModel
@{
    ViewBag.Title = "Compare";
}
<script src="~/Scripts/jquery-3.1.1.min.js"></script>
<style>
    body {
        color: black;
        font-family: 'source_sans_prolight';
    }

    .FTRButton {
        color: #fff;
        background: #34b091;
        font-size: 12px;
        font-family: 'source_sans_problack';
        border-radius: 30px;
        text-transform: uppercase;
        line-height: 13px;
    }

    .tooltiptext {
        display: none;
        font-size: 12px;
        font-family: "verdana";
    }
</style>

<div class="featured-item">
    <div class="block">
        <div class="block-title">
            <div class="col-md-3">
                <h1 style="text-decoration:none; color: #454855;">Compare</h1>
                @if (Model != null && Model.ExpectedLineUp != null && Model.ExpectedLineUp.EventName != null)
                {<h4>@Model.ExpectedLineUp.EventName</h4>}
                @if (Model.MinFullTeamRanking == 0)
                {
                    <a style="border:3px solid black" class="btn FTRButton" href="/Home/LoadCompare/@Model.ScrapeMatchId?MinFTR=0">All</a>
                }
                else
                {
                    <a class="btn FTRButton" href="/Home/LoadCompare/@Model.ScrapeMatchId?MinFTR=0">All</a>
                }
                @if (Model.MinFullTeamRanking == 4)
                {
                    <a style="border:3px solid black" class="btn FTRButton" href="/Home/LoadCompare/@Model.ScrapeMatchId?MinFTR=4">Min FTR 4</a>
                }
                else
                {
                    <a class="btn FTRButton" href="/Home/LoadCompare/@Model.ScrapeMatchId?MinFTR=4">Min FTR 4</a>
                }
                @if (Model.MinFullTeamRanking == 5)
                {
                    <a style="border:3px solid black" class="btn FTRButton" href="/Home/LoadCompare/@Model.ScrapeMatchId?MinFTR=5">Min FTR 5</a>
                }
                else
                {
                    <a class="btn FTRButton" href="/Home/LoadCompare/@Model.ScrapeMatchId?MinFTR=5">Min FTR 5</a>
                }
            </div>
            <div class="col-md-offset-3 col-md-3 htmlTooltipCenter">
                <div class="tooltiptext">
                    @if (Model.HeadToHead != null)
                    {@Html.Raw(Model.HeadToHead.Title)}
                </div>
                @if (Model.Teams.Any() && Model.Teams.Count > 1 && Model.HeadToHead != null)
                {
                    <br /><h1><span class="label label-success" style="background-color: #34b091;">H2H: @Model.Teams[0].TeamName @Model.HeadToHead.Team1Win - @Model.HeadToHead.Team2Win @Model.Teams[1].TeamName</span></h1>
                }
            </div>
        </div>
    </div>
    <br />
    <h2>
        @if (!string.IsNullOrEmpty(Model.Teams[0].Logo))
        {<img src="@Url.Content(Model.Teams[0].Logo)" title="@Model.Teams[0].TeamName" style="height:50px; width:50px; margin-bottom:5px" />}@Model.Teams[0].TeamName -
        @if (!string.IsNullOrEmpty(Model.Teams[1].Logo))
        {<img src="@Url.Content(Model.Teams[1].Logo)" title="@Model.Teams[1].TeamName" style="height:50px; width:50px; margin-bottom:5px" />}@Model.Teams[1].TeamName
    </h2>

    @if (Model != null && Model.ExpectedLineUp != null && Model.ExpectedLineUp.Players != null && Model.ExpectedLineUp.Players.Count != 10)
    {
        <span style="color:red">
            Expected linup received @Model.ExpectedLineUp.Players.Count players
            (Team1: @Model.ExpectedLineUp.Players.Count(p => p.TeamID == Model.Team1Id) /
            Team2: @Model.ExpectedLineUp.Players.Count(p => p.TeamID == Model.Team2Id))
        </span>
    }


    @{
        var TeamsCombined3Months = (from s in Model.Teams
                                    from t in s.TeamStatistics
                                    from e in t.Maps
                                    where t.Period == "3 Months"
                                    select e).ToList();
        var maplist3M = new List<List<MapStatisticModel>>();
        //maplist3M.Add(TeamsCombined3Months.Where(p => string.Equals(p.Map, "cache", StringComparison.CurrentCultureIgnoreCase)).ToList());
        maplist3M.Add(TeamsCombined3Months.Where(p => string.Equals(p.Map, "dust2", StringComparison.CurrentCultureIgnoreCase)).ToList());
        maplist3M.Add(TeamsCombined3Months.Where(p => string.Equals(p.Map, "inferno", StringComparison.CurrentCultureIgnoreCase)).ToList());
        maplist3M.Add(TeamsCombined3Months.Where(p => string.Equals(p.Map, "mirage", StringComparison.CurrentCultureIgnoreCase)).ToList());
        maplist3M.Add(TeamsCombined3Months.Where(p => string.Equals(p.Map, "nuke", StringComparison.CurrentCultureIgnoreCase)).ToList());
        maplist3M.Add(TeamsCombined3Months.Where(p => string.Equals(p.Map, "overpass", StringComparison.CurrentCultureIgnoreCase)).ToList());
        maplist3M.Add(TeamsCombined3Months.Where(p => string.Equals(p.Map, "train", StringComparison.CurrentCultureIgnoreCase)).ToList());
        maplist3M.Add(TeamsCombined3Months.Where(p => string.Equals(p.Map, "vertigo", StringComparison.CurrentCultureIgnoreCase)).ToList());
        //maplist3M.Add(TeamsCombined3Months.Where(p => string.Equals(p.Map, "cobblestone", StringComparison.CurrentCultureIgnoreCase)).ToList());

        var TeamsCombined6Months = (from s in Model.Teams
                                    from t in s.TeamStatistics
                                    from e in t.Maps
                                    where t.Period == "6 Months"
                                    select e).ToList();
        var maplist6M = new List<List<MapStatisticModel>>();
        //maplist6M.Add(TeamsCombined6Months.Where(p => string.Equals(p.Map, "cache", StringComparison.CurrentCultureIgnoreCase)).ToList());
        maplist6M.Add(TeamsCombined6Months.Where(p => string.Equals(p.Map, "dust2", StringComparison.CurrentCultureIgnoreCase)).ToList());
        maplist6M.Add(TeamsCombined6Months.Where(p => string.Equals(p.Map, "inferno", StringComparison.CurrentCultureIgnoreCase)).ToList());
        maplist6M.Add(TeamsCombined6Months.Where(p => string.Equals(p.Map, "mirage", StringComparison.CurrentCultureIgnoreCase)).ToList());
        maplist6M.Add(TeamsCombined6Months.Where(p => string.Equals(p.Map, "nuke", StringComparison.CurrentCultureIgnoreCase)).ToList());
        maplist6M.Add(TeamsCombined6Months.Where(p => string.Equals(p.Map, "overpass", StringComparison.CurrentCultureIgnoreCase)).ToList());
        maplist6M.Add(TeamsCombined6Months.Where(p => string.Equals(p.Map, "train", StringComparison.CurrentCultureIgnoreCase)).ToList());
        maplist6M.Add(TeamsCombined6Months.Where(p => string.Equals(p.Map, "vertigo", StringComparison.CurrentCultureIgnoreCase)).ToList());
        //maplist6M.Add(TeamsCombined6Months.Where(p => string.Equals(p.Map, "cobblestone", StringComparison.CurrentCultureIgnoreCase)).ToList());
    }


    @* ********** Extra stats by map ********** *@

    <table class="table table-condensed table-hover">
        <tr>
            <th>
                Map
            </th>
            <th>
                Nr Games
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Bomb explosion round win</b> </div>
                B
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Bomb defuse round win</b> </div>
                D
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Timeout round win</b> </div>
                T
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Number of grenade kills</b> </div>
                G
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Number of molotov kills</b> </div>
                M
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Number of zues kills</b> </div>
                Z
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Number of knife kills</b> </div>
                K
            </th>
        </tr>
        @foreach (var map in maplist3M.Where(p => p.Count > 0))
        {
            <tr class="mapline @map.FirstOrDefault().Map.ToLower()">
                <td>
                    @map.FirstOrDefault().Map.ToLower()
                </td>
                <td>
                    @map.Sum(p => p.TotalMatches)
                </td>
                <td>
                    O: <b>3.5:</b> @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.BombExplosionsWin35) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))
                    <b>4.5:</b> @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.BombExplosionsWin45) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))
                    <b>5.5:</b> @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.BombExplosionsWin55) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))
                    <b>6.5:</b> @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.BombExplosionsWin65) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                    U:  <b>3.5:</b> @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.BombExplosionsWin35) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                    <b>4.5:</b> @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.BombExplosionsWin45) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                    <b>5.5:</b> @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.BombExplosionsWin55) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                    <b>6.5:</b> @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.BombExplosionsWin65) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                </td>
                <td>
                    O: <b>2.5:</b> @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.BombDefusesWin25) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))
                    <b>3.5:</b>  @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.BombDefusesWin35) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))
                    <b>4.5:</b>  @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.BombDefusesWin45) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                    U: <b>2.5:</b>  @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.BombDefusesWin25) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                    <b>3.5:</b>  @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.BombDefusesWin35) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                    <b>4.5:</b>  @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.BombDefusesWin45) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                </td>
                <td>
                    O: <b>0.5:</b> @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.TimeOutWin05) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))
                    <b>1.5:</b>  @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.TimeOutWin15) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                    U: <b>0.5:</b>  @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.TimeOutWin05) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                    <b>1.5:</b>  @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.TimeOutWin15) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.GrenadeKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.GrenadeKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                    @Html.Raw(Math.Round(100 - (map.Sum(p => p.GrenadeKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - N: @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.GrenadeKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.MolotovKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.MolotovKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                    @Html.Raw(Math.Round(100 - (map.Sum(p => p.MolotovKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - N: @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.MolotovKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.ZuesKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.ZuesKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                    @Html.Raw(Math.Round(100 - (map.Sum(p => p.ZuesKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - N: @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.ZuesKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.KnifeKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.KnifeKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                    @Html.Raw(Math.Round(100 - (map.Sum(p => p.KnifeKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - N: @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.KnifeKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                </td>
            </tr>
        }
    </table>
    <table class="table table-condensed table-hover">
        <tr>
            <th>
                Map
            </th>
            <th>
                Nr Games
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Bomb explosion round win</b> </div>
                B
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Bomb defuse round win</b> </div>
                D
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Timeout round win</b> </div>
                T
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Number of grenade kills</b> </div>
                G
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Number of molotov kills</b> </div>
                M
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Number of zues kills</b> </div>
                Z
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Number of knife kills</b> </div>
                K
            </th>
        </tr>
        @foreach (var map in maplist6M.Where(p => p.Count > 0))
        {
            <tr class="mapline @map.FirstOrDefault().Map.ToLower()">
                <td>
                    @map.FirstOrDefault().Map.ToLower()
                </td>
                <td>
                    @map.Sum(p => p.TotalMatches)
                </td>
                <td>
                    O: <b>3.5:</b> @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.BombExplosionsWin35) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))
                    <b>4.5:</b> @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.BombExplosionsWin45) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))
                    <b>5.5:</b> @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.BombExplosionsWin55) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))
                    <b>6.5:</b> @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.BombExplosionsWin65) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                    U:  <b>3.5:</b> @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.BombExplosionsWin35) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                    <b>4.5:</b> @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.BombExplosionsWin45) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                    <b>5.5:</b> @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.BombExplosionsWin55) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                    <b>6.5:</b> @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.BombExplosionsWin65) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                </td>
                <td>
                    O: <b>2.5:</b> @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.BombDefusesWin25) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))
                    <b>3.5:</b>  @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.BombDefusesWin35) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))
                    <b>4.5:</b>  @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.BombDefusesWin45) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                    U: <b>2.5:</b>  @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.BombDefusesWin25) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                    <b>3.5:</b>  @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.BombDefusesWin35) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                    <b>4.5:</b>  @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.BombDefusesWin45) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                </td>
                <td>
                    O: <b>0.5:</b> @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.TimeOutWin05) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))
                    <b>1.5:</b>  @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.TimeOutWin15) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                    U: <b>0.5:</b>  @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.TimeOutWin05) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                    <b>1.5:</b>  @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.TimeOutWin15) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.GrenadeKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.GrenadeKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                    @Html.Raw(Math.Round(100 - (map.Sum(p => p.GrenadeKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - N: @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.GrenadeKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.MolotovKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.MolotovKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                    @Html.Raw(Math.Round(100 - (map.Sum(p => p.MolotovKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - N: @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.MolotovKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.ZuesKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.ZuesKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                    @Html.Raw(Math.Round(100 - (map.Sum(p => p.ZuesKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - N: @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.ZuesKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.KnifeKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.KnifeKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                    @Html.Raw(Math.Round(100 - (map.Sum(p => p.KnifeKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - N: @Html.Raw(Math.Round(1 / ((100 - Math.Round((map.Sum(p => p.KnifeKillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1)) / 100), 1))
                </td>
            </tr>
        }
    </table>


    @* *********** EXTRA STATS ************ *@
    @* ********** Extra stats by map ********** *@

    <table class="table table-condensed table-hover">
        <tr>
            <th>
                Map
            </th>
            <th>
                Nr Games
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Bomb explosion round win</b> </div>
                R1 B
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Bomb defuse round win</b> </div>
                R1 D
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Timeout round win</b> </div>
                R1 T
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Number of grenade kills</b> </div>
                R1 K
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Bomb explosion round win</b> </div>
                R16 B
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Bomb defuse round win</b> </div>
                R16 D
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Timeout round win</b> </div>
                R16 T
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Number of grenade kills</b> </div>
                R16 K
            </th>
        </tr>
        @foreach (var map in maplist3M.Where(p => p.Count > 0))
        {
            <tr class="mapline @map.FirstOrDefault().Map.ToLower()">
                <td>
                    @map.FirstOrDefault().Map.ToLower()
                </td>
                <td>
                    @map.Sum(p => p.TotalMatches)
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.Round1BombWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.Round1BombWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.Round1DefuseWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.Round1DefuseWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.Round1TimeoutWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.Round1TimeoutWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.Round1KillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.Round1KillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.Round16BombWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.Round16BombWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.Round16DefuseWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.Round16DefuseWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.Round16TimeoutWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.Round16TimeoutWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.Round16KillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.Round16KillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                </td>
            </tr>
        }
    </table>
    <table class="table table-condensed table-hover">
        <tr>
            <th>
                Map
            </th>
            <th>
                Nr Games
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Bomb explosion round win</b> </div>
                R1 B
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Bomb defuse round win</b> </div>
                R1 D
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Timeout round win</b> </div>
                R1 T
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Number of grenade kills</b> </div>
                R1 K
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Bomb explosion round win</b> </div>
                R16 B
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Bomb defuse round win</b> </div>
                R16 D
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Timeout round win</b> </div>
                R16 T
            </th>
            <th style="cursor: help" class="htmlTooltipLeft">
                <div class="tooltiptext"><b>Number of grenade kills</b> </div>
                R16 K
            </th>
        </tr>
        @foreach (var map in maplist6M.Where(p => p.Count > 0))
        {
            <tr class="mapline @map.FirstOrDefault().Map.ToLower()">
                <td>
                    @map.FirstOrDefault().Map.ToLower()
                </td>
                <td>
                    @map.Sum(p => p.TotalMatches)
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.Round1BombWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.Round1BombWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.Round1DefuseWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.Round1DefuseWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.Round1TimeoutWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.Round1TimeoutWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.Round1KillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.Round1KillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.Round16BombWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.Round16BombWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.Round16DefuseWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.Round16DefuseWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.Round16TimeoutWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.Round16TimeoutWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                </td>
                <td>
                    @Html.Raw(Math.Round((map.Sum(p => p.Round16KillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1))% - Y: @Html.Raw(Math.Round(1 / (Math.Round((map.Sum(p => p.Round16KillWin) / (double)map.Sum(p => p.TotalMatches)) * 100, 1) / 100), 1))<br />
                </td>
            </tr>
        }
    </table>


    @if (Model != null)
    {
        foreach (var Team in Model?.Teams)
        {
            <div class="col-md-6">
                @Html.Partial("Partials/_TeamStatistic2", Team)
            </div>
        }
    }
</div>

<script>
    $(document).ready(function () {
        $('.loading').fadeOut('slow');

        $("#CompareBtn").click(function () {
            // Loading spinner
            $('.loading').fadeIn('fast');
        });

        $("tr.mapline").hover(function () {
            var trClass = this.className.replace('mapline ', '');
            $("." + trClass).css("background-color", "#f5f5f5");
        });

        $("tr.mapline").mouseleave(function () {
            var trClass = this.className.replace('mapline ', '');
            $("." + trClass).css("background-color", "");
        });

        $('.htmlTooltip').each(function () {
            $(this).qtip({
                content: {
                    text: $(this).children('.tooltiptext')
                },
                style: {
                    classes: "qtip-green qtip-rounded"
                },
                show: 'click mouseenter',
                hide: 'unfocus mouseleave'
            });
        });

        $('.htmlTooltipCenter').each(function () {
            $(this).qtip({
                content: {
                    text: $(this).children('.tooltiptext')
                },
                style: {
                    classes: "qtip-green qtip-rounded"
                },
                position: {
                    my: 'top center',  // Position my top left...
                    at: 'bottom center', // at the bottom right of...
                    target: $(this) // my target
                },
                show: 'click mouseenter',
                hide: 'unfocus mouseleave'
            });
        });

        $('.htmlTooltipLeft').each(function () {
            $(this).qtip({
                content: {
                    text: $(this).children('.tooltiptext')
                },
                style: {
                    classes: "qtip-green qtip-rounded"
                },
                position: {
                    my: 'top right',  // Position my top left...
                    at: 'bottom left', // at the bottom right of...
                    target: $(this) // my target
                },
                show: 'click mouseenter',
                hide: 'unfocus mouseleave'
            });
        });
    });
</script>
